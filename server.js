require('dotenv').config(); // Tambahkan ini di paling atas untuk memuat variabel lingkungan

const express = require("express");
const cors = require("cors");
const bodyParser = require("body-parser");
const path = require("path");
const axios = require("axios"); // Sudah ada
// const fs = require('fs').promises; // Hapus atau nonaktifkan ini jika tidak lagi menyimpan lokal
// const { v4: uuidv4 } = require('uuid'); // Hapus atau nonaktifkan ini jika tidak lagi menyimpan lokal

const app = express();
const port = 3000;

app.use(cors()); //
app.use(bodyParser.json({ limit: "20mb" })); //
app.use(bodyParser.urlencoded({ extended: true, limit: "20mb" })); //

// Serve frontend static assets
app.use(express.static(path.join(__dirname, "frontend")));

// Hapus atau nonaktifkan middleware ini karena tidak lagi melayani gambar lokal
// app.use('/generated_images', express.static(path.join(__dirname, 'frontend', 'generated_images')));

// Route to serve the new landing page index.html
app.get("/", (req, res) => {
  res.sendFile(path.join(__dirname, "frontend", "index.html"));
});

// Route to serve filter-photobooth.html
app.get("/filter-photobooth.html", (req, res) => {
    res.sendFile(path.join(__dirname, "frontend", "filter-photobooth.html"));
});

// Route to serve prompt-photobooth.html
app.get("/prompt-photobooth.html", (req, res) => {
    res.sendFile(path.join(__dirname, "frontend", "prompt-photobooth.html"));
});

// Route to serve upload-photobooth.html (NEW ROUTE)
app.get("/upload-photobooth.html", (req, res) => {
    res.sendFile(path.join(__dirname, "frontend", "upload-photobooth.html"));
});

// Route to serve result.html
app.get("/result.html", (req, res) => {
    res.sendFile(path.join(__dirname, "frontend", "result.html"));
});

// Tentukan Imgur Client ID dari variabel lingkungan
// Penting: Ganti 'YOUR_IMGUR_CLIENT_ID' dengan Client ID Anda dari langkah 1
const IMGUR_CLIENT_ID = process.env.IMGUR_CLIENT_ID || 'YOUR_IMGUR_CLIENT_ID';

// API endpoint to handle image generation
app.post("/generate", async (req, res) => {
  try {
    const { image, prompt, negative_prompt } = req.body; //

    if (!image || !prompt) { //
      return res.status(400).json({ error: "Missing required parameters: image and/or prompt" }); //
    }

    const seed = Math.floor(Math.random() * 100000); // Optional: random seed

    const sdPayload = { //
      init_images: [image], //
      prompt: prompt, //
      negative_prompt: negative_prompt || "", //
      width: 512, //
      height: 512, //
      sampler_index: "LMS", // Sampler type, can be modified
      steps: 80, //
      denoising_strength: 0.4, //
      cfg_scale: 4, //
      seed:seed //
    };

    const sdResponse = await axios.post(`${process.env.SD_API_URL || "http://stable-diffusion:7860"}/sdapi/v1/img2img`, sdPayload);

    const generatedImageBase64 = sdResponse.data.images?.[0]; //

    if (!generatedImageBase64) { //
      return res.status(500).json({ error: "No image generated by the model" }); //
    }

    // --- BAGIAN UNGGAH KE IMGUR ---
    const imageDataWithoutPrefix = generatedImageBase64.replace(/^data:image\/(png|jpeg|jpg);base64,/, "");

    const imgurResponse = await axios.post('https://api.imgur.com/3/image', 
        { image: imageDataWithoutPrefix, type: 'base64' },
        { headers: { 'Authorization': `Client-ID ${IMGUR_CLIENT_ID}` } }
    );

    const imgurImageUrl = imgurResponse.data.data.link; // Ini adalah URL publik dari Imgur

    if (!imgurImageUrl) {
        return res.status(500).json({ error: "Failed to upload image to Imgur or Imgur returned no link." });
    }
    // --- AKHIR BAGIAN UNGGAH KE IMGUR ---

    res.set("Cache-Control", "no-store"); // Optional: prevent browser caching
    res.json({ generated_image_url: imgurImageUrl }); // Kirim URL Imgur ke frontend
    
  } catch (error) { //
    console.error("Image generation or Imgur upload error:", error?.response?.data || error.message); //
    res.status(500).json({ error: "Failed to generate or upload image" }); //
  }
});

// Start the server
app.listen(port, () => { //
  console.log(`âœ… Server running at http://localhost:${port}`); //
});